In file included from [01m[K/home/jakeluo/Documents/ORBSLAM_MapSave/Thirdparty/g2o/g2o/types/types_six_dof_expmap.h:41[m[K,
                 from [01m[K/home/jakeluo/Documents/ORBSLAM_MapSave/Thirdparty/g2o/g2o/types/types_seven_dof_expmap.h:36[m[K,
                 from [01m[K/home/jakeluo/Documents/ORBSLAM_MapSave/include/LoopClosing.h:34[m[K,
                 from [01m[K/home/jakeluo/Documents/ORBSLAM_MapSave/include/LocalMapping.h:26[m[K,
                 from [01m[K/home/jakeluo/Documents/ORBSLAM_MapSave/include/Tracking.h:32[m[K,
                 from [01m[K/home/jakeluo/Documents/ORBSLAM_MapSave/include/System.h:35[m[K,
                 from [01m[K/home/jakeluo/Documents/MonitoringSystemRos2/src/droneutility/include/drone.hpp:11[m[K,
                 from [01m[K/home/jakeluo/Documents/MonitoringSystemRos2/src/droneutility/src/drone.cpp:1[m[K:
[01m[K/home/jakeluo/Documents/ORBSLAM_MapSave/Thirdparty/g2o/g2o/types/se3quat.h:43:38:[m[K [01;35m[Kwarning: [m[Kextra â€˜[01m[K;[m[Kâ€™ [[01;35m[K-Wpedantic[m[K]
   43 |       EIGEN_MAKE_ALIGNED_OPERATOR_NEW[01;35m[K;[m[K
      |                                      [01;35m[K^[m[K
      |                                      [31m[K-[m[K
In file included from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/subscription_base.hpp:29[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/callback_group.hpp:26[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/executor.hpp:37[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/rclcpp.hpp:155[m[K,
                 from [01m[K/home/jakeluo/Documents/MonitoringSystemRos2/src/droneutility/include/drone.hpp:1[m[K,
                 from [01m[K/home/jakeluo/Documents/MonitoringSystemRos2/src/droneutility/src/drone.cpp:1[m[K:
/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/subscription_factory.hpp:95:3:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<droneinterfaces::msg::FrameArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = droneinterfaces::msg::FrameArray_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<droneinterfaces::msg::FrameArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = droneinterfaces::msg::FrameArray_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<droneinterfaces::msg::FrameArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<droneinterfaces::msg::FrameArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/jakeluo/Documents/MonitoringSystemRos2/src/droneutility/src/drone.cpp:55:81:[m[K   required from here
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/any_subscription_callback.hpp:400:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>[m[Kâ€™})
  400 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
      |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/client.hpp:27[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/callback_group.hpp:23[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/executor.hpp:37[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/rclcpp.hpp:155[m[K,
                 from [01m[K/home/jakeluo/Documents/MonitoringSystemRos2/src/droneutility/include/drone.hpp:1[m[K,
                 from [01m[K/home/jakeluo/Documents/MonitoringSystemRos2/src/droneutility/src/drone.cpp:1[m[K:
[01m[K/usr/include/c++/9/variant:1291:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
 1291 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
      |                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/9/variant:1291:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
 1291 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
      |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[01m[K/usr/include/c++/9/variant:1292:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
 1292 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
      |                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/9/variant:1292:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
 1292 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
      |                          [01;36m[K^~~~~~~~~[m[K
[01m[K/usr/include/c++/9/variant:1354:2:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
 1354 |  [01;36m[Koperator[m[K=(_Tp&& __rhs)
      |  [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/9/variant:1354:2:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
/usr/include/c++/9/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>&&; <template-parameter-2-2> = std::enable_if<true, void>::type; _Types = {std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[01m[K/usr/include/c++/9/variant:1350:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&)>, std::function<void(const droneinterfaces::msg::FrameArray_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::default_delete<droneinterfaces::msg::FrameArray_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const droneinterfaces::msg::FrameArray_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>][m[Kâ€™
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/any_subscription_callback.hpp:400:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/subscription_factory.hpp:95:3:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<droneinterfaces::msg::FrameArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = droneinterfaces::msg::FrameArray_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<droneinterfaces::msg::FrameArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = droneinterfaces::msg::FrameArray_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<droneinterfaces::msg::FrameArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/jakeluo/Software/ros2_rolling/install/rclcpp/include/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = droneinterfaces::msg::FrameArray_<std::allocator<void> >; CallbackT = std::_Bind<void (dronenamespace::Drone::*(dronenamespace::Drone*, std::_Placeholder<1>, ORB_SLAM2::System*))(std::shared_ptr<droneinterfaces::msg::FrameArray_<std::allocator<void> > >, ORB_SLAM2::System*)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<droneinterfaces::msg::FrameArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<droneinterfaces::msg::FrameArray_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/jakeluo/Documents/MonitoringSystemRos2/src/droneutility/src/drone.cpp:55:81:[m[K   required from here
[01m[K/usr/include/c++/9/variant:1268:8:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
 1268 |  using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
      |        [01;31m[K^~~~~~~~~~~~~~~[m[K
make[2]: *** [CMakeFiles/drone.dir/build.make:63ï¼šCMakeFiles/drone.dir/src/drone.cpp.o] é”™è¯¯ 1
make[1]: *** [CMakeFiles/Makefile2:80ï¼šCMakeFiles/drone.dir/all] é”™è¯¯ 2
make: *** [Makefile:141ï¼šall] é”™è¯¯ 2
